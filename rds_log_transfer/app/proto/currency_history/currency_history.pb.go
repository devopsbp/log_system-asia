// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.2
// source: currency_history.proto

package currency_history

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CurrencyHistoryMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                *string                `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	CharacterId           *string                `protobuf:"bytes,2,opt,name=character_id,json=characterId" json:"character_id,omitempty"`
	Platform              *int32                 `protobuf:"zigzag32,3,opt,name=platform" json:"platform,omitempty"`
	UpdateType            *string                `protobuf:"bytes,4,opt,name=update_type,json=updateType" json:"update_type,omitempty"`
	ChangeAmountPaid      *int32                 `protobuf:"zigzag32,5,opt,name=change_amount_paid,json=changeAmountPaid" json:"change_amount_paid,omitempty"`
	ChangeAmountFree      *int32                 `protobuf:"zigzag32,6,opt,name=change_amount_free,json=changeAmountFree" json:"change_amount_free,omitempty"`
	AfterAmountPaid       *int32                 `protobuf:"zigzag32,7,opt,name=after_amount_paid,json=afterAmountPaid" json:"after_amount_paid,omitempty"`
	AfterAmountFree       *int32                 `protobuf:"zigzag32,8,opt,name=after_amount_free,json=afterAmountFree" json:"after_amount_free,omitempty"`
	ActionType            *string                `protobuf:"bytes,9,opt,name=action_type,json=actionType" json:"action_type,omitempty"`
	LetterId              *string                `protobuf:"bytes,10,opt,name=letter_id,json=letterId" json:"letter_id,omitempty"`
	Price                 *int32                 `protobuf:"zigzag32,11,opt,name=price" json:"price,omitempty"`
	ExpiredAt             *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=expired_at,json=expiredAt" json:"expired_at,omitempty"`
	RequestHeaderLocation *string                `protobuf:"bytes,13,opt,name=request_header_location,json=requestHeaderLocation" json:"request_header_location,omitempty"`
	Reason                *string                `protobuf:"bytes,14,opt,name=reason" json:"reason,omitempty"`
	FirstPurchase         *bool                  `protobuf:"varint,15,opt,name=first_purchase,json=firstPurchase" json:"first_purchase,omitempty"`
	AmountPaid            *string                `protobuf:"bytes,16,opt,name=amount_paid,json=amountPaid" json:"amount_paid,omitempty"`
	AmountPaidCurrency    *string                `protobuf:"bytes,17,opt,name=amount_paid_currency,json=amountPaidCurrency" json:"amount_paid_currency,omitempty"`
	AddCount              *int32                 `protobuf:"zigzag32,18,opt,name=add_count,json=addCount" json:"add_count,omitempty"`
	ItemId                *int32                 `protobuf:"zigzag32,19,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	IsUsedCoupon          *bool                  `protobuf:"varint,20,opt,name=is_used_coupon,json=isUsedCoupon" json:"is_used_coupon,omitempty"`
	DiscountAmount        *int32                 `protobuf:"zigzag32,21,opt,name=discount_amount,json=discountAmount" json:"discount_amount,omitempty"`
	LogTime               *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=log_time,json=logTime" json:"log_time,omitempty"`
	Uuid                  *string                `protobuf:"bytes,23,opt,name=uuid" json:"uuid,omitempty"`
}

func (x *CurrencyHistoryMsg) Reset() {
	*x = CurrencyHistoryMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_currency_history_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyHistoryMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyHistoryMsg) ProtoMessage() {}

func (x *CurrencyHistoryMsg) ProtoReflect() protoreflect.Message {
	mi := &file_currency_history_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyHistoryMsg.ProtoReflect.Descriptor instead.
func (*CurrencyHistoryMsg) Descriptor() ([]byte, []int) {
	return file_currency_history_proto_rawDescGZIP(), []int{0}
}

func (x *CurrencyHistoryMsg) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *CurrencyHistoryMsg) GetCharacterId() string {
	if x != nil && x.CharacterId != nil {
		return *x.CharacterId
	}
	return ""
}

func (x *CurrencyHistoryMsg) GetPlatform() int32 {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return 0
}

func (x *CurrencyHistoryMsg) GetUpdateType() string {
	if x != nil && x.UpdateType != nil {
		return *x.UpdateType
	}
	return ""
}

func (x *CurrencyHistoryMsg) GetChangeAmountPaid() int32 {
	if x != nil && x.ChangeAmountPaid != nil {
		return *x.ChangeAmountPaid
	}
	return 0
}

func (x *CurrencyHistoryMsg) GetChangeAmountFree() int32 {
	if x != nil && x.ChangeAmountFree != nil {
		return *x.ChangeAmountFree
	}
	return 0
}

func (x *CurrencyHistoryMsg) GetAfterAmountPaid() int32 {
	if x != nil && x.AfterAmountPaid != nil {
		return *x.AfterAmountPaid
	}
	return 0
}

func (x *CurrencyHistoryMsg) GetAfterAmountFree() int32 {
	if x != nil && x.AfterAmountFree != nil {
		return *x.AfterAmountFree
	}
	return 0
}

func (x *CurrencyHistoryMsg) GetActionType() string {
	if x != nil && x.ActionType != nil {
		return *x.ActionType
	}
	return ""
}

func (x *CurrencyHistoryMsg) GetLetterId() string {
	if x != nil && x.LetterId != nil {
		return *x.LetterId
	}
	return ""
}

func (x *CurrencyHistoryMsg) GetPrice() int32 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *CurrencyHistoryMsg) GetExpiredAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiredAt
	}
	return nil
}

func (x *CurrencyHistoryMsg) GetRequestHeaderLocation() string {
	if x != nil && x.RequestHeaderLocation != nil {
		return *x.RequestHeaderLocation
	}
	return ""
}

func (x *CurrencyHistoryMsg) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *CurrencyHistoryMsg) GetFirstPurchase() bool {
	if x != nil && x.FirstPurchase != nil {
		return *x.FirstPurchase
	}
	return false
}

func (x *CurrencyHistoryMsg) GetAmountPaid() string {
	if x != nil && x.AmountPaid != nil {
		return *x.AmountPaid
	}
	return ""
}

func (x *CurrencyHistoryMsg) GetAmountPaidCurrency() string {
	if x != nil && x.AmountPaidCurrency != nil {
		return *x.AmountPaidCurrency
	}
	return ""
}

func (x *CurrencyHistoryMsg) GetAddCount() int32 {
	if x != nil && x.AddCount != nil {
		return *x.AddCount
	}
	return 0
}

func (x *CurrencyHistoryMsg) GetItemId() int32 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *CurrencyHistoryMsg) GetIsUsedCoupon() bool {
	if x != nil && x.IsUsedCoupon != nil {
		return *x.IsUsedCoupon
	}
	return false
}

func (x *CurrencyHistoryMsg) GetDiscountAmount() int32 {
	if x != nil && x.DiscountAmount != nil {
		return *x.DiscountAmount
	}
	return 0
}

func (x *CurrencyHistoryMsg) GetLogTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LogTime
	}
	return nil
}

func (x *CurrencyHistoryMsg) GetUuid() string {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return ""
}

var File_currency_history_proto protoreflect.FileDescriptor

var file_currency_history_proto_rawDesc = []byte{
	0x0a, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xea, 0x06, 0x0a, 0x12,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d,
	0x73, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x46, 0x72, 0x65, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x0f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x61, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0f,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x72, 0x65, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x36,
	0x0a, 0x17, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x25,
	0x0a, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x70, 0x61, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x61, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x69, 0x64,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x61, 0x64, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x11, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x55, 0x73, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a,
	0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x6c, 0x6f, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x42, 0x18, 0x5a, 0x16, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79,
}

var (
	file_currency_history_proto_rawDescOnce sync.Once
	file_currency_history_proto_rawDescData = file_currency_history_proto_rawDesc
)

func file_currency_history_proto_rawDescGZIP() []byte {
	file_currency_history_proto_rawDescOnce.Do(func() {
		file_currency_history_proto_rawDescData = protoimpl.X.CompressGZIP(file_currency_history_proto_rawDescData)
	})
	return file_currency_history_proto_rawDescData
}

var file_currency_history_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_currency_history_proto_goTypes = []interface{}{
	(*CurrencyHistoryMsg)(nil),    // 0: currency_history.CurrencyHistoryMsg
	(*timestamppb.Timestamp)(nil), // 1: google.protobuf.Timestamp
}
var file_currency_history_proto_depIdxs = []int32{
	1, // 0: currency_history.CurrencyHistoryMsg.expired_at:type_name -> google.protobuf.Timestamp
	1, // 1: currency_history.CurrencyHistoryMsg.log_time:type_name -> google.protobuf.Timestamp
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_currency_history_proto_init() }
func file_currency_history_proto_init() {
	if File_currency_history_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_currency_history_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyHistoryMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_currency_history_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_currency_history_proto_goTypes,
		DependencyIndexes: file_currency_history_proto_depIdxs,
		MessageInfos:      file_currency_history_proto_msgTypes,
	}.Build()
	File_currency_history_proto = out.File
	file_currency_history_proto_rawDesc = nil
	file_currency_history_proto_goTypes = nil
	file_currency_history_proto_depIdxs = nil
}
